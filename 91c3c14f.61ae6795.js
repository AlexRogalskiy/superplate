(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),o=t(7),i=(t(0),t(126)),r={id:"creating-a-plugin",title:"Creating a Plugin",sidebar_label:"Creating a Plugin"},p={unversionedId:"getting-started/creating-a-plugin",id:"getting-started/creating-a-plugin",isDocsHomePage:!1,title:"Creating a Plugin",description:"You may need to add and modify some files to properly set up libraries with your Next.js project. What we call plugin is a directory with all the packages you need to install and the files you need to add and modify.",source:"@site/docs/getting-started/creating-a-plugin.md",slug:"/getting-started/creating-a-plugin",permalink:"/superplate/docs/getting-started/creating-a-plugin",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting-started/creating-a-plugin.md",version:"current",sidebar_label:"Creating a Plugin",sidebar:"someSidebar",previous:{title:"How it Works?",permalink:"/superplate/docs/getting-started/how-it-works"},next:{title:"References",permalink:"/superplate/docs/getting-started/references"}},s=[{value:"Creating a Plugin Directory",id:"creating-a-plugin-directory",children:[]},{value:"Adding Plugin to the Prompts",id:"adding-plugin-to-the-prompts",children:[]},{value:"Creating a <code>package.json</code>",id:"creating-a-packagejson",children:[]},{value:"Modifying <code>package.json</code> with User Answers",id:"modifying-packagejson-with-user-answers",children:[]},{value:"Using Templates",id:"using-templates",children:[{value:"Modifying the <code>App</code> and the <code>Document</code>",id:"modifying-the-app-and-the-document",children:[]},{value:"Defining Custom Data",id:"defining-custom-data",children:[]}]},{value:"Custom <code>tsconfig.json</code>",id:"custom-tsconfigjson",children:[]},{value:"Custom <code>.babelrc</code>",id:"custom-babelrc",children:[]},{value:"Providing a Plugin Description",id:"providing-a-plugin-description",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],c={toc:s};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"You may need to add and modify some files to properly set up libraries with your Next.js project. What we call ",Object(i.b)("strong",{parentName:"p"},"plugin")," is a directory with all the packages you need to install and the files you need to add and modify."),Object(i.b)("p",null,"This article will show you how to create a superplate plugin from scratch and the ways superplate offers you to interact with other plugins in your source. "),Object(i.b)("p",null,"Let's create a plugin to add ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://styled-components.com"}),"styled-components")," to our project easily. "),Object(i.b)("h3",{id:"creating-a-plugin-directory"},"Creating a Plugin Directory"),Object(i.b)("p",null,"Let's start with creating a directory for our plugin inside our source's ",Object(i.b)("inlineCode",{parentName:"p"},"plugins")," directory."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"mkdir plugins/styled-components\n")),Object(i.b)("h3",{id:"adding-plugin-to-the-prompts"},"Adding Plugin to the Prompts"),Object(i.b)("p",null,"We need to add our plugin to appropriate place in ",Object(i.b)("inlineCode",{parentName:"p"},"prompt.js")," file. We can ask the user for a styling and place ",Object(i.b)("inlineCode",{parentName:"p"},"styled-components")," inside it."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'module.exports = {\n    prompts: [\n        {\n            name: "styling",\n            message: "How would you like to style your apps?",\n            type: "select",\n            choices: [\n                { message: "None", name: "none" },\n                { message: "styled-components", name: "styled-components" },\n            ],\n            default: "none",\n        },\n    ]\n}\n')),Object(i.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Make sure ",Object(i.b)("inlineCode",{parentName:"p"},"name")," or ",Object(i.b)("inlineCode",{parentName:"p"},"value")," property for the choice is the same with the directory name you've created."))),Object(i.b)("h2",{id:"creating-a-packagejson"},"Creating a ",Object(i.b)("inlineCode",{parentName:"h2"},"package.json")),Object(i.b)("p",null,"Let's create a ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," inside the plugin directory. We need to add ",Object(i.b)("inlineCode",{parentName:"p"},"styled-components")," package and the ",Object(i.b)("inlineCode",{parentName:"p"},"babel-plugin-styled-components")," to properly support SSR. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "dependencies": {\n      "styled-components": "^5.2.1"\n    },\n    "devDependencies": {\n      "babel-plugin-styled-components": "^1.12.0"\n    }\n}\n')),Object(i.b)("h2",{id:"modifying-packagejson-with-user-answers"},"Modifying ",Object(i.b)("inlineCode",{parentName:"h2"},"package.json")," with User Answers"),Object(i.b)("p",null,"Let's say that we want to prompt the users, asking them if they want to include the support for SSR."),Object(i.b)("p",null,"We can do so by simply modifying our ",Object(i.b)("inlineCode",{parentName:"p"},"prompt.js"),". Append below codes to your prompts array. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n    name: "ssr",\n    message: "Do you want styled-components to support SSR?",\n    // This will be a Yes/No question\n    type: "confirm",\n    // We want to skip this question if styled-components is not selected.\n    skip: ({answers}) => answers.styling !== "styled-components",\n}\n')),Object(i.b)("p",null,"And if this prompt is not answered ",Object(i.b)("em",{parentName:"p"},"Yes")," we want to remove the babel plugin from ",Object(i.b)("inlineCode",{parentName:"p"},"devDependencies"),". We can do that by creating a ",Object(i.b)("inlineCode",{parentName:"p"},"package.js")," inside our plugin."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'module.exports = {\n    /**\n     * package: the current content of your package.json\n     * answers: array of given user answers to the prompts \n     */\n    apply(package, answers) {\n        if (answers.ssr === false) {\n            delete package.devDependencies[\n                "babel-plugin-styled-components"\n            ];\n        }\n        return package;\n    },\n};\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We will be handling this plugin later in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#custom-babelrc"}),"Custom ",Object(i.b)("inlineCode",{parentName:"a"},".babelrc"))," section."))),Object(i.b)("h2",{id:"using-templates"},"Using Templates"),Object(i.b)("p",null,"We have handled the dependencies for our plugin. Now, let's add an example component. First, we need two files ",Object(i.b)("inlineCode",{parentName:"p"},"styled.ts")," and ",Object(i.b)("inlineCode",{parentName:"p"},"example.tsx"),". We will place them under ",Object(i.b)("inlineCode",{parentName:"p"},"plugins/styled-components/src/components/example"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"styled.ts")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import styled from "styled-components";\n\nexport const StyledContainer = styled.main`\n    padding: 1rem;\n    margin: 0 auto;\n    max-width: 32rem;\n`;\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"example.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { StyledContainer } from "./styled";\n\nexport const ExampleComponent: React.FC = () => {\n    return (\n        <StyledContainer>\n            <h2>This is an example component with styled-components</h2>\n            <%_ if (answers.ssr === true) { _%>\n            <small>and with SSR!</small>\n            <%_ } _%>\n            <p>some text</p>\n        </StyledContainer>\n    )\n}\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We can use EJS in our files. superplate will process all ejs templates while creating a project. If you want to learn more about the available template data; please check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"references#templates"}),"References#templates")))),Object(i.b)("h3",{id:"modifying-the-app-and-the-document"},"Modifying the ",Object(i.b)("inlineCode",{parentName:"h3"},"App")," and the ",Object(i.b)("inlineCode",{parentName:"h3"},"Document")),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://styled-components.com/docs/advanced#theming"}),"styled-components")," has full support for theming. In order to use themes in our entire app; we need to modify Next.js's App component. ",Object(i.b)("strong",{parentName:"p"},"superplate"),"'s base template allows you to modify ",Object(i.b)("inlineCode",{parentName:"p"},"App")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Document"),"; to wrap styled-component's ",Object(i.b)("inlineCode",{parentName:"p"},"ThemeProvider")," we need to create an ",Object(i.b)("inlineCode",{parentName:"p"},"extend.js")," file."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("strong",{parentName:"p"},"superplate")," will merge all ",Object(i.b)("inlineCode",{parentName:"p"},"extend.js")," content and pass it to your templates. You only need to cover modifications for your plugin in plugin's ",Object(i.b)("inlineCode",{parentName:"p"},"extend.js")," file."))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const base = {\n    _app: {\n        // _app.import will be appended to the import section in pages/_app.tsx file.\n        import: [\n            \'import { ThemeProvider } from "styled-components";\',\n        ],\n        // _app.inner will be appended to the inner code section of the custom App.\n        inner: [\n            `const theme = {\n                main: "mediumseagreen"\n            }`,\n        ],\n        // _app.wrapper will wrap the return statement of the custom App.\n        wrapper: [["<ThemeProvider theme={theme}>", "</ThemeProvider>"]],\n    },\n};\n\nmodule.exports = {\n    extend() {\n        return base;\n    },\n};\n')),Object(i.b)("p",null,"Since we try to add SSR support. We also need to modify the custom ",Object(i.b)("inlineCode",{parentName:"p"},"Document"),". Let's add the necessary lines for ",Object(i.b)("inlineCode",{parentName:"p"},"_document.tsx")," and only apply them if we select ssr support."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const base = {\n    _app: {\n        import: [\n            \'import { ThemeProvider } from "styled-components";\',\n        ],\n        inner: [\n            `const theme = {\n                main: "mediumseagreen"\n            }`,\n        ],\n        wrapper: [["<ThemeProvider theme={theme}>", "</ThemeProvider>"]],\n    },\n    _document: {\n        import: [\'import { ServerStyleSheet } from "styled-components";\'],\n        initialProps: [\n            `const sheet = new ServerStyleSheet();\n            const originalRenderPage = ctx.renderPage;\n            try {\n                ctx.renderPage = () =>\n                    originalRenderPage({\n                        enhanceApp: (App) => (props) =>\n                            sheet.collectStyles(<App {...props} />),\n                    });\n                const initialProps = await Document.getInitialProps(ctx);\n                return {\n                    ...initialProps,\n                    styles: (\n                        <>\n                            {initialProps.styles}\n                            {sheet.getStyleElement()}\n                        </>\n                    ),\n                };\n            } finally {\n                sheet.seal();\n            }`,\n        ],\n        wrapper: [],\n    },\n};\n\nmodule.exports = {\n    extend(answers) {\n        if (!answers.ssr) {\n            // Remove _document modifications if ssr is false.\n            delete base._document;\n        }\n        return base;\n    },\n};\n')),Object(i.b)("h3",{id:"defining-custom-data"},"Defining Custom Data"),Object(i.b)("p",null,"We're done for ",Object(i.b)("inlineCode",{parentName:"p"},"_app")," and ",Object(i.b)("inlineCode",{parentName:"p"},"_document")," but in many plugins you may need different template data for each plugin. You can define and return custom data to your templates for every plugin. We used ",Object(i.b)("inlineCode",{parentName:"p"},"testSetup")," property to handle wrappers in ",Object(i.b)("strong",{parentName:"p"},"superplate"),"'s core plugins ",Object(i.b)("inlineCode",{parentName:"p"},"testing-library")," and ",Object(i.b)("inlineCode",{parentName:"p"},"enzyme"),". These custom properties will be merged as well as ",Object(i.b)("inlineCode",{parentName:"p"},"_app")," and ",Object(i.b)("inlineCode",{parentName:"p"},"_document"),". Here's an example for custom template data."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const base = {\n    testSetup: {\n        import: [\n            \'import { ThemeProvider } from "styled-components";\',\n        ],\n        inner: [\n            `const theme = {\n                main: "mediumseagreen"\n            }`,\n        ],\n        wrapper: [["<ThemeProvider theme={theme}>", "</ThemeProvider>"]],\n    },\n};\n\nmodule.exports = {\n    extend() {\n        return base;\n    },\n};\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We will not cover ",Object(i.b)("inlineCode",{parentName:"p"},"testing-library")," and ",Object(i.b)("inlineCode",{parentName:"p"},"enzyme")," plugins in this article but if you wish to learn more about them; you can check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pankod/superplate-core-plugins/tree/master/plugins/testing-library"}),"superplate-core-plugins/react-library"),"."))),Object(i.b)("h2",{id:"custom-tsconfigjson"},"Custom ",Object(i.b)("inlineCode",{parentName:"h2"},"tsconfig.json")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"superplate")," will take care of your plugin's ",Object(i.b)("inlineCode",{parentName:"p"},"tsconfig.json")," file just like your ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," and it will merge every custom config you define when you create a new project. We've created an example component with styled-components. Let's add a path alias for our ",Object(i.b)("inlineCode",{parentName:"p"},"components")," directory in our ",Object(i.b)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "compilerOptions": {\n        "paths": {\n            "@components/*": ["src/components/*"],\n            "@components": ["src/components"],\n        }\n    }\n}\n')),Object(i.b)("h2",{id:"custom-babelrc"},"Custom ",Object(i.b)("inlineCode",{parentName:"h2"},".babelrc")),Object(i.b)("p",null,"We will need a babel plugin to ensure consistency between the server and the client. Let's create a ",Object(i.b)("inlineCode",{parentName:"p"},".babelrc")," file in our plugin to tell babel to use this plugin. ",Object(i.b)("strong",{parentName:"p"},"superplate")," will merge all babel config to one just like ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," and ",Object(i.b)("inlineCode",{parentName:"p"},"tsconfig.json")," files."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "presets": ["next/babel"],\n  "plugins": [["styled-components", { "ssr": true }]]\n}\n')),Object(i.b)("h2",{id:"providing-a-plugin-description"},"Providing a Plugin Description"),Object(i.b)("p",null,"We're using ",Object(i.b)("inlineCode",{parentName:"p"},"meta.json")," to collect data about plugins. You can provide an url to the docs and a description for your plugin in ",Object(i.b)("inlineCode",{parentName:"p"},"meta.json"),". Here's what we will use for ",Object(i.b)("inlineCode",{parentName:"p"},"styled-components")," plugin:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "name": "Styled Components",\n    "description": "Utilising tagged template literals (a recent addition to JavaScript) and the power of CSS, styled-components allows you to write actual CSS code to style your components.",\n    "url": "https://styled-components.com/docs"\n}\n')),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"We've created a plugin from scratch to add ",Object(i.b)("inlineCode",{parentName:"p"},"styled-components")," to our next project with ",Object(i.b)("strong",{parentName:"p"},"superplate"),". If you want to check out how we created different plugins, please check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pankod/superplate-core-plugins"}),"superplate-core-plugins"),". To learn more about superplate's API, you can check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"references"}),"References"),"."))}l.isMDXComponent=!0},126:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),l=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},d=function(e){var n=l(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,u=d["".concat(r,".").concat(m)]||d[m]||b[m]||i;return t?o.a.createElement(u,p(p({ref:n},c),{},{components:t})):o.a.createElement(u,p({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var c=2;c<i;c++)r[c]=t[c];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);